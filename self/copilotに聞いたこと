EventBridgeをトリガーにLambdaでRDSを停止したいのですがどうしたらいいですか
Amazon EventBridgeとAWS Lambdaを組み合わせて、特定のタイミングやイベントに基づいてAmazon RDSインスタンスを停止することができます。以下はそのための手順です：

1. IAMロールの作成
Lambda関数がRDSインスタンスを停止するための権限を持つIAMロールを作成します。

2. Lambda関数の作成
Pythonを使用した簡単なLambda関数の例を以下に示します：

python
import boto3

def lambda_handler(event, context):
    rds_client = boto3.client('rds')
    db_instance_identifier = 'your-rds-instance-identifier'
    
    response = rds_client.stop_db_instance(
        DBInstanceIdentifier=db_instance_identifier
    )
    
    return response
この関数は、指定されたRDSインスタンスを停止します。IAMロールにrds:StopDBInstance権限が付与されていることを確認してください。

3. EventBridgeルールの作成
EventBridgeを使用して、特定のイベントやスケジュールでLambda関数をトリガーするルールを作成します。

例として、毎日夜中の12時にRDSインスタンスを停止するスケジュールを設定する場合のEventBridgeルールの設定です：

json
{
  "ScheduleExpression": "cron(0 0 * * ? *)",
  "Targets": [
    {
      "Arn": "arn:aws:lambda:region:account-id:function:your-lambda-function-name",
      "Id": "YourTargetId"
    }
  ]
}
AWS Management ConsoleやAWS CLIを使用して、EventBridgeルールを作成し、ターゲットにLambda関数を指定します。

これで、指定したスケジュールに基づいてLambda関数がトリガーされ、RDSインスタンスが停止されます。具体的な設定や追加のカスタマイズが必要であれば、詳細をお知らせください！

your-rds-instance-identifierとは
your-rds-instance-identifierは、AWS RDSインスタンスの一意の識別子を指します。RDSインスタンスを作成するときに指定するか、AWSコンソールで確認できます。この識別子は、RDSインスタンスを操作するためのユニークな名前であり、例えば、RDSインスタンスを停止したり、再起動したりするときに使用されます。

以下の手順で確認できます：

AWS Management Consoleにログイン。

「RDS」サービスを選択。

左側のナビゲーションペインから「データベース」を選択。

ターゲットとなるRDSインスタンスを選択すると、そのインスタンスの詳細画面が表示されます。

DB Instance Identifierというフィールドに一意の識別子が表示されます。

この識別子をLambda関数内のDBInstanceIdentifierフィールドに設定して、特定のRDSインスタンスをターゲットにします。以下に再度例を示します：

python
import boto3

def lambda_handler(event, context):
    rds_client = boto3.client('rds')
    db_instance_identifier = 'your-actual-rds-instance-identifier'  # ここにあなたのRDSインスタンスの識別子を入れてください
    
    response = rds_client.stop_db_instance(
        DBInstanceIdentifier=db_instance_identifier
    )
    
    return response
これで、指定したRDSインスタンスを停止することができます。他に質問があればお知らせください！

DB 識別子のことですか？
はい、その通りです！your-rds-instance-identifierは、まさにRDSインスタンスの「DB識別子」（DB Instance Identifier）のことを指しています。

この識別子は、AWS RDSインスタンスを一意に識別するために使用される名前です。RDSインスタンスを停止、再起動、または他の操作を行う場合に、この識別子を使用します。

他に何かご不明な点がありましたら、お気軽にお知らせください！

import boto3 def lambda_handler(event, context): rds_client = boto3.client('rds') db_instance_identifier = 'database-2' response = rds_client.stop_db_instance( DBInstanceIdentifier=db_instance_identifier ) return response
このコードは基本的に正しいです。database-2という識別子のRDSインスタンスを停止することができます。ただし、以下のポイントに注意してください：

AWS SDK (boto3)のインポート：AWS Lambdaランタイム環境でboto3が利用できることを確認してください。

IAMロールの設定：Lambda関数に割り当てられたIAMロールに、RDSインスタンスを停止するための適切な権限 (rds:StopDBInstance) が付与されていることを確認してください。

エラーハンドリング：コードがエラーを処理できるようにするための追加のエラーハンドリングを考慮してください。

例として、エラーハンドリングを追加したコードは次のとおりです：

python
import boto3
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    rds_client = boto3.client('rds')
    db_instance_identifier = 'database-2'
    
    try:
        response = rds_client.stop_db_instance(
            DBInstanceIdentifier=db_instance_identifier
        )
        logger.info(f"RDS instance '{db_instance_identifier}' has been stopped successfully.")
    except Exception as e:
        logger.error(f"Error stopping RDS instance '{db_instance_identifier}': {str(e)}")
    
    return response
このコードは、RDSインスタンスの停止が成功した場合とエラーが発生した場合にログメッセージを出力します。これにより、トラブルシューティングが容易になります。次のステップとして、EventBridgeルールを作成して、このLambda関数をトリガーするように設定してください。質問があれば、何でも聞いてくださいね！

{ "errorMessage": "Unable to marshal response: Object of type datetime is not JSON serializable", "errorType": "Runtime.MarshalError", "requestId": "cac1e9c7-2761-45aa-8361-5fe0550ced1d", "stackTrace": [] }
このエラーは、Lambda関数のレスポンスに含まれるdatetimeオブジェクトがJSONにシリアライズできないために発生しています。datetimeオブジェクトを文字列に変換する必要があります。

以下は、datetimeオブジェクトを文字列に変換する方法を含む修正済みのコード例です：

python
import boto3
import logging
from datetime import datetime

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    rds_client = boto3.client('rds')
    db_instance_identifier = 'database-2'
    
    try:
        response = rds_client.stop_db_instance(
            DBInstanceIdentifier=db_instance_identifier
        )
        logger.info(f"RDS instance '{db_instance_identifier}' has been stopped successfully.")
        
        # datetimeオブジェクトを文字列に変換
        response['StoppingTime'] = response['StoppingTime'].strftime('%Y-%m-%dT%H:%M:%S') if 'StoppingTime' in response else None

    except Exception as e:
        logger.error(f"Error stopping RDS instance '{db_instance_identifier}': {str(e)}")
        return {
            'statusCode': 500,
            'body': f"Error: {str(e)}"
        }
    
    return {
        'statusCode': 200,
        'body': response
    }
この修正版では、responseオブジェクトの中のStoppingTimeフィールドがdatetimeオブジェクトの場合、それを文字列に変換しています。これにより、JSONシリアライゼーションのエラーが解消されます。試してみてください！

もし他にも疑問や質問があれば、お気軽にどうぞ！

